# This workflow complements the Azure Static Web Apps deployment by handling:
# - Backend deployment to Azure Container Apps
# - Database migrations
# - Additional Azure resource management
# The frontend is deployed via the Azure Static Web Apps GitHub workflow

name: Deploy Backend and Azure Resources

on:
  push:
    branches: [ main, development ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: jobboard-${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}-api
  NODE_ENV: production

jobs:
  # Code Quality Checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            frontend/package-lock.json
            backend/package-lock.json

      - name: Install dependencies
        run: |
          npm ci

      - name: Lint code
        run: |
          npm run lint || echo "Lint issues found"

      - name: Run tests
        run: |
          npm run test || echo "Tests failed or not defined"

  # Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: quality
    outputs:
      frontend-hash: ${{ steps.hash.outputs.frontend }}
      backend-hash: ${{ steps.hash.outputs.backend }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json

      - name: Build application
        run: |
          npm ci
          npm run build

      - name: Generate build hashes
        id: hash
        run: |
          echo "frontend=$(find frontend/build -type f -exec md5sum {} \; | sort | md5sum | cut -d' ' -f1)" >> $GITHUB_OUTPUT
          echo "backend=$(find backend -name "*.js" -type f -exec md5sum {} \; | sort | md5sum | cut -d' ' -f1)" >> $GITHUB_OUTPUT

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ github.sha }}
          path: frontend/build/

      - name: Upload backend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build-${{ github.sha }}
          path: backend/

  # Deploy Backend and Azure Resources
  deploy:
    name: Deploy Backend and Azure Resources
    runs-on: ubuntu-latest
    needs: build
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build-${{ github.sha }}
          path: build/

      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build-${{ github.sha }}
          path: backend/

      - name: Setup Node.js for Azure deployment
        uses: actions/setup-node@v4
        with:
          node-version: '18'


      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Azure Container Registry
        run: |
          az acr login --name ${{ secrets.ACR_REGISTRY_NAME }}

      - name: Build and push backend image
        run: |
          docker build -f docker/Dockerfile.backend -t ${{ secrets.ACR_REGISTRY_NAME }}.azurecr.io/jobboard-backend:${{ github.sha }} ./backend
          docker push ${{ secrets.ACR_REGISTRY_NAME }}.azurecr.io/jobboard-backend:${{ github.sha }}

      - name: Deploy to Azure Container Apps
        run: |
          az containerapp update \
            --name jobboard-${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}-api \
            --resource-group jobboard-${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }} \
            --image ${{ secrets.ACR_REGISTRY_NAME }}.azurecr.io/jobboard-backend:${{ github.sha }} \
            --set-env-vars DB_HOST=${{ secrets.DB_HOST }} DB_PASSWORD=${{ secrets.DB_PASSWORD }}

      - name: Run database migrations
        run: |
          mysql -h ${{ secrets.DB_HOST }} -u ${{ secrets.DB_USER }} -p${{ secrets.DB_PASSWORD }} < scripts/setup-db.sql

      - name: Health check
        run: |
          echo "Waiting for deployment to complete..."
          sleep 60

          # Check if the backend API is responding
          if curl -f "https://${{ secrets.CONTAINER_APP_URL }}/health" > /dev/null 2>&1; then
            echo "‚úÖ Backend health check passed"
          else
            echo "‚ö†Ô∏è Backend health check failed - application may still be starting"
          fi

      - name: Notify deployment status
        run: |
          echo "üöÄ Deployment completed successfully!"
          echo "üîó Backend API: https://${{ secrets.CONTAINER_APP_URL }}"
          echo "Note: Frontend is deployed via Azure Static Web Apps workflow"

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate || echo "Security issues found"

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Cleanup
  cleanup:
    name: Cleanup Artifacts
    runs-on: ubuntu-latest
    if: always()
    needs: [deploy]
    steps:
      - name: Delete old artifacts
        run: |
          echo "Cleaning up old build artifacts..."
          # Add cleanup logic for old artifacts