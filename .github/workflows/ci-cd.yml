name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  NODE_ENV: production

jobs:
  # Code Quality Checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            frontend/package-lock.json
            backend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend && npm ci
          cd ../backend && npm ci

      - name: Lint frontend
        run: |
          cd frontend
          npm run lint || echo "No lint script defined"

      - name: Lint backend
        run: |
          cd backend
          npm run lint || echo "No lint script defined"

      - name: Test frontend
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false || echo "Tests failed or not defined"

      - name: Test backend
        run: |
          cd backend
          npm test || echo "Tests failed or not defined"

  # Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: quality
    outputs:
      frontend-hash: ${{ steps.hash.outputs.frontend }}
      backend-hash: ${{ steps.hash.outputs.backend }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            frontend/package-lock.json
            backend/package-lock.json

      - name: Build frontend
        run: |
          cd frontend
          npm ci
          npm run build
          cd ..

      - name: Build backend
        run: |
          cd backend
          npm ci
          npm run build || echo "No build script defined"
          cd ..

      - name: Generate build hashes
        id: hash
        run: |
          echo "frontend=$(find frontend/build -type f -exec md5sum {} \; | sort | md5sum | cut -d' ' -f1)" >> $GITHUB_OUTPUT
          echo "backend=$(find backend -name "*.js" -type f -exec md5sum {} \; | sort | md5sum | cut -d' ' -f1)" >> $GITHUB_OUTPUT

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ github.sha }}
          path: frontend/build/

      - name: Upload backend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build-${{ github.sha }}
          path: backend/

  # Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.6"

      - name: Check AWS Limits
        run: |
          echo "Checking AWS EIP limits..."
          EIP_COUNT=$(aws ec2 describe-addresses --query 'Addresses | length' --output text)
          echo "Current EIP count: $EIP_COUNT"
          if [ "$EIP_COUNT" -ge 5 ]; then
            echo "⚠️ WARNING: Approaching EIP limit ($EIP_COUNT/5)"
            echo "Consider requesting a limit increase or cleaning up unused EIPs"
          fi

      - name: Validate DB Password
        run: |
          echo "Validating DB password format..."
          if [[ "${{ secrets.DB_PASSWORD }}" =~ ^[A-Za-z0-9@#\$%\^\&\+\=\*\!]{8,41}$ ]]; then
            echo "✅ DB password format is valid"
          else
            echo "❌ DB password must be 8-41 characters and contain only letters, numbers, and @#\$%^&+=*! symbols"
            exit 1
          fi


      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build-${{ github.sha }}
          path: frontend/build/
        continue-on-error: true

      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build-${{ github.sha }}
          path: backend/
        continue-on-error: true

      - name: Deploy infrastructure
        run: |
          cd terraform
          terraform init

          echo "Checking for existing resources..."
          # Check if VPC exists and import if needed
          VPC_ID=$(aws ec2 describe-vpcs --filters Name=tag:Name,Values=jobboard-vpc --query 'Vpcs[0].VpcId' --output text 2>/dev/null || echo "")
          if [ ! -z "$VPC_ID" ] && [ "$VPC_ID" != "None" ]; then
            echo "Found existing VPC: $VPC_ID"
            terraform import aws_vpc.main "$VPC_ID" 2>/dev/null || echo "VPC import failed or already imported"
          fi

          # Check if subnets exist and import if needed
          for i in 0 1; do
            SUBNET_ID=$(aws ec2 describe-subnets --filters Name=tag:Name,Values=jobboard-public-subnet-$((i+1)) --query 'Subnets[0].SubnetId' --output text 2>/dev/null || echo "")
            if [ ! -z "$SUBNET_ID" ] && [ "$SUBNET_ID" != "None" ]; then
              echo "Found existing public subnet $((i+1)): $SUBNET_ID"
              terraform import "aws_subnet.public[$i]" "$SUBNET_ID" 2>/dev/null || echo "Subnet import failed or already imported"
            fi

            PRIVATE_SUBNET_ID=$(aws ec2 describe-subnets --filters Name=tag:Name,Values=jobboard-private-subnet-$((i+1)) --query 'Subnets[0].SubnetId' --output text 2>/dev/null || echo "")
            if [ ! -z "$PRIVATE_SUBNET_ID" ] && [ "$PRIVATE_SUBNET_ID" != "None" ]; then
              echo "Found existing private subnet $((i+1)): $PRIVATE_SUBNET_ID"
              terraform import "aws_subnet.private[$i]" "$PRIVATE_SUBNET_ID" 2>/dev/null || echo "Private subnet import failed or already imported"
            fi
          done

          # Check if security groups exist and import if needed
          WEB_SG_ID=$(aws ec2 describe-security-groups --filters Name=tag:Name,Values=jobboard-web-sg --query 'SecurityGroups[0].GroupId' --output text 2>/dev/null || echo "")
          if [ ! -z "$WEB_SG_ID" ] && [ "$WEB_SG_ID" != "None" ]; then
            echo "Found existing web security group: $WEB_SG_ID"
            terraform import aws_security_group.web "$WEB_SG_ID" 2>/dev/null || echo "Web SG import failed or already imported"
          fi

          APP_SG_ID=$(aws ec2 describe-security-groups --filters Name=tag:Name,Values=jobboard-app-sg --query 'SecurityGroups[0].GroupId' --output text 2>/dev/null || echo "")
          if [ ! -z "$APP_SG_ID" ] && [ "$APP_SG_ID" != "None" ]; then
            echo "Found existing app security group: $APP_SG_ID"
            terraform import aws_security_group.app "$APP_SG_ID" 2>/dev/null || echo "App SG import failed or already imported"
          fi

          DB_SG_ID=$(aws ec2 describe-security-groups --filters Name=tag:Name,Values=jobboard-db-sg --query 'SecurityGroups[0].GroupId' --output text 2>/dev/null || echo "")
          if [ ! -z "$DB_SG_ID" ] && [ "$DB_SG_ID" != "None" ]; then
            echo "Found existing db security group: $DB_SG_ID"
            terraform import aws_security_group.db "$DB_SG_ID" 2>/dev/null || echo "DB SG import failed or already imported"
          fi

          # Check if IAM role exists and import if needed
          IAM_ROLE_NAME="jobboard-ec2-role"
          if aws iam get-role --role-name "$IAM_ROLE_NAME" --query 'Role.RoleName' --output text 2>/dev/null | grep -q "$IAM_ROLE_NAME"; then
            echo "Found existing IAM role: $IAM_ROLE_NAME"
            terraform import aws_iam_role.ec2_role "$IAM_ROLE_NAME" 2>/dev/null || echo "IAM role import failed or already imported"
          fi

          # Check if security groups exist and import if needed
          WEB_SG_ID=$(aws ec2 describe-security-groups --filters Name=tag:Name,Values=jobboard-web-sg --query 'SecurityGroups[0].GroupId' --output text 2>/dev/null || echo "")
          if [ ! -z "$WEB_SG_ID" ] && [ "$WEB_SG_ID" != "None" ]; then
            echo "Found existing web security group: $WEB_SG_ID"
            terraform import aws_security_group.web "$WEB_SG_ID" 2>/dev/null || echo "Web SG import failed or already imported"
          fi

          APP_SG_ID=$(aws ec2 describe-security-groups --filters Name=tag:Name,Values=jobboard-app-sg --query 'SecurityGroups[0].GroupId' --output text 2>/dev/null || echo "")
          if [ ! -z "$APP_SG_ID" ] && [ "$APP_SG_ID" != "None" ]; then
            echo "Found existing app security group: $APP_SG_ID"
            terraform import aws_security_group.app "$APP_SG_ID" 2>/dev/null || echo "App SG import failed or already imported"
          fi

          DB_SG_ID=$(aws ec2 describe-security-groups --filters Name=tag:Name,Values=jobboard-db-sg --query 'SecurityGroups[0].GroupId' --output text 2>/dev/null || echo "")
          if [ ! -z "$DB_SG_ID" ] && [ "$DB_SG_ID" != "None" ]; then
            echo "Found existing db security group: $DB_SG_ID"
            terraform import aws_security_group.db "$DB_SG_ID" 2>/dev/null || echo "DB SG import failed or already imported"
          fi

          # Check if IAM role exists and import if needed
          IAM_ROLE_NAME="jobboard-ec2-role"
          if aws iam get-role --role-name "$IAM_ROLE_NAME" --query 'Role.RoleName' --output text 2>/dev/null | grep -q "$IAM_ROLE_NAME"; then
            echo "Found existing IAM role: $IAM_ROLE_NAME"
            terraform import aws_iam_role.ec2_role "$IAM_ROLE_NAME" 2>/dev/null || echo "IAM role import failed or already imported"
          fi

          # Check if security groups exist and import if needed
          WEB_SG_ID=$(aws ec2 describe-security-groups --filters Name=tag:Name,Values=jobboard-web-sg --query 'SecurityGroups[0].GroupId' --output text 2>/dev/null || echo "")
          if [ ! -z "$WEB_SG_ID" ] && [ "$WEB_SG_ID" != "None" ]; then
            echo "Found existing web security group: $WEB_SG_ID"
            terraform import aws_security_group.web "$WEB_SG_ID" 2>/dev/null || echo "Web SG import failed or already imported"
          fi

          APP_SG_ID=$(aws ec2 describe-security-groups --filters Name=tag:Name,Values=jobboard-app-sg --query 'SecurityGroups[0].GroupId' --output text 2>/dev/null || echo "")
          if [ ! -z "$APP_SG_ID" ] && [ "$APP_SG_ID" != "None" ]; then
            echo "Found existing app security group: $APP_SG_ID"
            terraform import aws_security_group.app "$APP_SG_ID" 2>/dev/null || echo "App SG import failed or already imported"
          fi

          DB_SG_ID=$(aws ec2 describe-security-groups --filters Name=tag:Name,Values=jobboard-db-sg --query 'SecurityGroups[0].GroupId' --output text 2>/dev/null || echo "")
          if [ ! -z "$DB_SG_ID" ] && [ "$DB_SG_ID" != "None" ]; then
            echo "Found existing db security group: $DB_SG_ID"
            terraform import aws_security_group.db "$DB_SG_ID" 2>/dev/null || echo "DB SG import failed or already imported"
          fi

          # Check if IAM role exists and import if needed
          IAM_ROLE_NAME="jobboard-ec2-role"
          if aws iam get-role --role-name "$IAM_ROLE_NAME" --query 'Role.RoleName' --output text 2>/dev/null | grep -q "$IAM_ROLE_NAME"; then
            echo "Found existing IAM role: $IAM_ROLE_NAME"
            terraform import aws_iam_role.ec2_role "$IAM_ROLE_NAME" 2>/dev/null || echo "IAM role import failed or already imported"
          fi

          echo "Checking AWS EIP limits..."
          aws ec2 describe-addresses --query 'Addresses | length' || echo "EIP check completed"

          echo "Running terraform plan..."
          terraform plan \
            -var="environment=dev" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="project_name=jobboard" \
            -var="db_username=jobboard_user" \
            -var="instance_type=t2.micro" \
            -var="key_pair_name=jobboard-key"

          echo "Applying terraform configuration..."
          terraform apply -auto-approve \
            -var="environment=dev" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="project_name=jobboard" \
            -var="db_username=jobboard_user" \
            -var="instance_type=t2.micro" \
            -var="key_pair_name=jobboard-key"

      - name: Build and push Docker images
        run: |
          # Login to AWS ECR (if using)
          # aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO

          # Build and tag images
          docker build -f docker/Dockerfile.backend -t jobboard-backend:latest ./backend
          docker build -f docker/Dockerfile.frontend -t jobboard-frontend:latest ./frontend

          # Push to registry (if using ECR)
          # docker tag jobboard-backend:latest $ECR_REPO/jobboard-backend:latest
          # docker tag jobboard-frontend:latest $ECR_REPO/jobboard-frontend:latest
          # docker push $ECR_REPO/jobboard-backend:latest
          # docker push $ECR_REPO/jobboard-frontend:latest

      - name: Deploy application
        run: |
          # Deploy using Docker Compose or your deployment method
          echo "Deploying to development environment..."
          # Add your deployment commands here

      - name: Run database migrations
        run: |
          # Run database setup script
          mysql -h ${{ secrets.DB_HOST }} -u ${{ secrets.DB_USER }} -p${{ secrets.DB_PASSWORD }} < scripts/setup-db.sql

      - name: Health check
        run: |
          # Wait for application to be ready
          sleep 60
          # Add health check logic here
          echo "Health check completed"

  # Deploy to Production
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.6"

      - name: Check AWS Limits
        run: |
          echo "Checking AWS EIP limits for production..."
          EIP_COUNT=$(aws ec2 describe-addresses --query 'Addresses | length' --output text)
          echo "Current EIP count: $EIP_COUNT"
          if [ "$EIP_COUNT" -ge 5 ]; then
            echo "⚠️ WARNING: Approaching EIP limit ($EIP_COUNT/5)"
            echo "Consider requesting a limit increase or cleaning up unused EIPs"
          fi

      - name: Validate DB Password
        run: |
          echo "Validating DB password format..."
          if [[ "${{ secrets.DB_PASSWORD }}" =~ ^[A-Za-z0-9@#\$%\^\&\+\=\*\!]{8,41}$ ]]; then
            echo "✅ DB password format is valid"
          else
            echo "❌ DB password must be 8-41 characters and contain only letters, numbers, and @#\$%^&+=*! symbols"
            exit 1
          fi

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build-${{ github.sha }}
          path: frontend/build/
        continue-on-error: true

      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build-${{ github.sha }}
          path: backend/
        continue-on-error: true

      - name: Deploy infrastructure
        run: |
          cd terraform
          terraform init

          echo "Checking for existing resources..."
          # Check if VPC exists and import if needed
          VPC_ID=$(aws ec2 describe-vpcs --filters Name=tag:Name,Values=jobboard-vpc --query 'Vpcs[0].VpcId' --output text 2>/dev/null || echo "")
          if [ ! -z "$VPC_ID" ] && [ "$VPC_ID" != "None" ]; then
            echo "Found existing VPC: $VPC_ID"
            terraform import aws_vpc.main "$VPC_ID" 2>/dev/null || echo "VPC import failed or already imported"
          fi

          # Check if subnets exist and import if needed
          for i in 0 1; do
            SUBNET_ID=$(aws ec2 describe-subnets --filters Name=tag:Name,Values=jobboard-public-subnet-$((i+1)) --query 'Subnets[0].SubnetId' --output text 2>/dev/null || echo "")
            if [ ! -z "$SUBNET_ID" ] && [ "$SUBNET_ID" != "None" ]; then
              echo "Found existing public subnet $((i+1)): $SUBNET_ID"
              terraform import "aws_subnet.public[$i]" "$SUBNET_ID" 2>/dev/null || echo "Subnet import failed or already imported"
            fi

            PRIVATE_SUBNET_ID=$(aws ec2 describe-subnets --filters Name=tag:Name,Values=jobboard-private-subnet-$((i+1)) --query 'Subnets[0].SubnetId' --output text 2>/dev/null || echo "")
            if [ ! -z "$PRIVATE_SUBNET_ID" ] && [ "$PRIVATE_SUBNET_ID" != "None" ]; then
              echo "Found existing private subnet $((i+1)): $PRIVATE_SUBNET_ID"
              terraform import "aws_subnet.private[$i]" "$PRIVATE_SUBNET_ID" 2>/dev/null || echo "Private subnet import failed or already imported"
            fi
          done

          # Check if security groups exist and import if needed
          WEB_SG_ID=$(aws ec2 describe-security-groups --filters Name=tag:Name,Values=jobboard-web-sg --query 'SecurityGroups[0].GroupId' --output text 2>/dev/null || echo "")
          if [ ! -z "$WEB_SG_ID" ] && [ "$WEB_SG_ID" != "None" ]; then
            echo "Found existing web security group: $WEB_SG_ID"
            terraform import aws_security_group.web "$WEB_SG_ID" 2>/dev/null || echo "Web SG import failed or already imported"
          fi

          APP_SG_ID=$(aws ec2 describe-security-groups --filters Name=tag:Name,Values=jobboard-app-sg --query 'SecurityGroups[0].GroupId' --output text 2>/dev/null || echo "")
          if [ ! -z "$APP_SG_ID" ] && [ "$APP_SG_ID" != "None" ]; then
            echo "Found existing app security group: $APP_SG_ID"
            terraform import aws_security_group.app "$APP_SG_ID" 2>/dev/null || echo "App SG import failed or already imported"
          fi

          DB_SG_ID=$(aws ec2 describe-security-groups --filters Name=tag:Name,Values=jobboard-db-sg --query 'SecurityGroups[0].GroupId' --output text 2>/dev/null || echo "")
          if [ ! -z "$DB_SG_ID" ] && [ "$DB_SG_ID" != "None" ]; then
            echo "Found existing db security group: $DB_SG_ID"
            terraform import aws_security_group.db "$DB_SG_ID" 2>/dev/null || echo "DB SG import failed or already imported"
          fi

          # Check if IAM role exists and import if needed
          IAM_ROLE_NAME="jobboard-ec2-role"
          if aws iam get-role --role-name "$IAM_ROLE_NAME" --query 'Role.RoleName' --output text 2>/dev/null | grep -q "$IAM_ROLE_NAME"; then
            echo "Found existing IAM role: $IAM_ROLE_NAME"
            terraform import aws_iam_role.ec2_role "$IAM_ROLE_NAME" 2>/dev/null || echo "IAM role import failed or already imported"
          fi

          echo "Running terraform plan..."
          terraform plan \
            -var="environment=prod" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="project_name=jobboard" \
            -var="db_username=jobboard_user" \
            -var="instance_type=t2.micro" \
            -var="key_pair_name=jobboard-key" \
            -var="deletion_protection=true" \
            -var="multi_az=true"

          echo "Applying terraform configuration..."
          terraform apply -auto-approve \
            -var="environment=prod" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="project_name=jobboard" \
            -var="db_username=jobboard_user" \
            -var="instance_type=t2.micro" \
            -var="key_pair_name=jobboard-key" \
            -var="deletion_protection=true" \
            -var="multi_az=true"

      - name: Build and push Docker images
        run: |
          # Build production images
          docker build -f docker/Dockerfile.backend -t jobboard-backend:prod ./backend
          docker build -f docker/Dockerfile.frontend -t jobboard-frontend:prod ./frontend

      - name: Deploy application
        run: |
          echo "Deploying to production environment..."
          # Add production deployment commands

      - name: Run database migrations
        run: |
          mysql -h ${{ secrets.DB_HOST }} -u ${{ secrets.DB_USER }} -p${{ secrets.DB_PASSWORD }} < scripts/setup-db.sql

      - name: Health check
        run: |
          sleep 120
          echo "Production health check completed"

      - name: Notify deployment
        run: |
          echo "Production deployment completed successfully"
          # Add notification logic (Slack, email, etc.)

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit
        run: |
          cd frontend && npm audit --audit-level=moderate || echo "Security issues found"
          cd ../backend && npm audit --audit-level=moderate || echo "Security issues found"

      - name: Run Snyk (if configured)
        run: |
          # Add Snyk scanning if you have it set up
          echo "Security scanning completed"

  # Cleanup
  cleanup:
    name: Cleanup Artifacts
    runs-on: ubuntu-latest
    if: always()
    needs: [deploy-dev, deploy-prod]
    steps:
      - name: Delete old artifacts
        run: |
          echo "Cleaning up old build artifacts..."
          # Add cleanup logic for old artifacts